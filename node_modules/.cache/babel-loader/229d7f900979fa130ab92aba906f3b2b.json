{"ast":null,"code":"import axios from 'axios';\nexport var login = function login(username, password) {\n  return function (dispatch, getState) {\n    var headers = {\n      Accept: 'application/json',\n      \"Content-Type\": \"application/json\"\n    };\n    var body = {\n      username: username,\n      password: password\n    };\n    console.log('USERNAME:', username);\n    console.log('PASS:', password);\n    console.log('BODY:', body);\n    return fetch(\"http://127.0.0.1:2000/auth\", {\n      headers: headers,\n      body: body,\n      method: \"POST\"\n    }).then(function (res) {\n      if (res.status < 500) {\n        console.log('there was an error:', res);\n        return {\n          status: res.status,\n          res: res\n        };\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(function (res) {\n      if (res.status === 200) {\n        dispatch({\n          type: 'LOGIN_SUCCESSFUL',\n          data: res.data\n        });\n        return res.data;\n      } else if (res.status === 403 || res.status === 401) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      } else {\n        dispatch({\n          type: \"LOGIN_FAILED\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport var loadUser = function loadUser() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: \"USER_LOADING\"\n    });\n    var token = getState().auth.token;\n    var headers = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"http://127.0.0.1:2000\", {\n      headers: headers\n    }).then(function (res) {\n      if (res.status < 500) {\n        return {\n          status: res.status,\n          res: res\n        };\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(function (res) {\n      if (res.status === 200) {\n        dispatch({\n          type: 'USER_LOADED',\n          user: res.data\n        });\n        return res.data;\n      } else if (res.status >= 400 && res.status < 500) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/stephaniedoan/redux-login/src/actions/auth.js"],"names":["axios","login","username","password","dispatch","getState","headers","Accept","body","console","log","fetch","method","then","res","status","type","data","loadUser","token","auth","user"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport const login = (username, password) => {\n  return (dispatch, getState) => {\n    let headers = {Accept: 'application/json', \"Content-Type\": \"application/json\"};\n    let body = {username, password};\n\n    console.log('USERNAME:', username);\n    console.log('PASS:', password);\n    console.log('BODY:', body);\n\n    return fetch(\"http://127.0.0.1:2000/auth\", {headers, body, method: \"POST\"})\n      .then(res => {\n        if (res.status < 500) {\n          console.log('there was an error:', res);\n            return {status: res.status, res};\n        } else {\n          console.log(\"Server Error!\");\n          throw res;\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({type: 'LOGIN_SUCCESSFUL', data: res.data });\n          return res.data;\n        } else if (res.status === 403 || res.status === 401) {\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n          throw res.data;\n        } else {\n          dispatch({type: \"LOGIN_FAILED\", data: res.data});\n          throw res.data;\n        }\n      })\n  }\n}\n\nexport const loadUser = () => {\n  return (dispatch, getState) => {\n    dispatch({type: \"USER_LOADING\"});\n\n    const token = getState().auth.token;\n\n    let headers = {\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n    return fetch(\"http://127.0.0.1:2000\", {headers, })\n      .then(res => {\n        if (res.status < 500) {\n          return {status: res.status, res};\n        } else {\n          console.log(\"Server Error!\");\n          throw res;\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({type: 'USER_LOADED', user: res.data });\n          return res.data;\n        } else if (res.status >= 400 && res.status < 500) {\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n          throw res.data;\n        }\n      })\n  }\n}"]},"metadata":{},"sourceType":"module"}