{"ast":null,"code":"import axios from 'axios';\nexport var login = function login(username, password) {\n  return function (dispatch, getState) {\n    var headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    var body = JSON.stringify({\n      username: username,\n      password: password\n    });\n    return axios(\"https://127.0.0.1:2000/auth\", {\n      headers: headers,\n      body: body,\n      method: \"POST\"\n    }).then(function (res) {\n      if (res.status < 500) {\n        console.log('there was an error');\n        return res.json().then(function (data) {\n          return {\n            status: res.status,\n            data: data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(function (res) {\n      if (res.status === 200) {\n        dispatch({\n          type: 'LOGIN_SUCCESSFUL',\n          data: res.data\n        });\n        return res.data;\n      } else if (res.status === 403 || res.status === 401) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      } else {\n        dispatch({\n          type: \"LOGIN_FAILED\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport var loadUser = function loadUser() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: \"USER_LOADING\"\n    });\n    var token = getState().auth.token;\n    var headers = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return axios(\"https://127.0.0.1:2000\", {\n      headers: headers\n    }).then(function (res) {\n      if (res.status < 500) {\n        return res.json().then(function (data) {\n          return {\n            status: res.status,\n            data: data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(function (res) {\n      if (res.status === 200) {\n        dispatch({\n          type: 'USER_LOADED',\n          user: res.data\n        });\n        return res.data;\n      } else if (res.status >= 400 && res.status < 500) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/stephaniedoan/redux-login/src/actions/auth.js"],"names":["axios","login","username","password","dispatch","getState","headers","body","JSON","stringify","method","then","res","status","console","log","json","data","type","loadUser","token","auth","user"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport const login = (username, password) => {\n  return (dispatch, getState) => {\n    let headers = {\"Content-Type\": \"application/json\"};\n    let body = JSON.stringify({username, password});\n\n    return axios(\"https://127.0.0.1:2000/auth\", {headers, body, method: \"POST\"})\n      .then(res => {\n        if (res.status < 500) {\n          console.log('there was an error');\n          return res.json().then(data => {\n            return {status: res.status, data};\n          })\n        } else {\n          console.log(\"Server Error!\");\n          throw res;\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({type: 'LOGIN_SUCCESSFUL', data: res.data });\n          return res.data;\n        } else if (res.status === 403 || res.status === 401) {\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n          throw res.data;\n        } else {\n          dispatch({type: \"LOGIN_FAILED\", data: res.data});\n          throw res.data;\n        }\n      })\n  }\n}\n\nexport const loadUser = () => {\n  return (dispatch, getState) => {\n    dispatch({type: \"USER_LOADING\"});\n\n    const token = getState().auth.token;\n\n    let headers = {\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n    return axios(\"https://127.0.0.1:2000\", {headers, })\n      .then(res => {\n        if (res.status < 500) {\n          return res.json().then(data => {\n            return {status: res.status, data};\n          })\n        } else {\n          console.log(\"Server Error!\");\n          throw res;\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({type: 'USER_LOADED', user: res.data });\n          return res.data;\n        } else if (res.status >= 400 && res.status < 500) {\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n          throw res.data;\n        }\n      })\n  }\n}"]},"metadata":{},"sourceType":"module"}